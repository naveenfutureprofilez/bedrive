{"version":3,"mappings":"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","names":["Endpoint","useAdminReport","payload","useQuery","fetchAnalyticsReport","keepPreviousData","types","dateRange","params","apiClient","response","FormattedDuration","memo","minutes","seconds","propsMs","propsStartDate","propsEndDate","verbose","addZeroToFirstUnit","isLive","maxIsLiveMs","minDuration","liveInterval","trans","useTrans","initialMs","useMemo","startDate","parseAbsoluteToLocal","getCurrentDateTime","diff","ms","setMs","useState","useEffect","msRef","useRef","overMaxMs","interval","prev","unsignedMs","parsedMS","formattedValue","formatVerbose","formatCompact","jsx","Fragment","t","output","message","addZero","v","value","AdminReportCardRow","report","isLoading","data","ReportCard","Trans","propsIcon","children","type","currentValue","previousValue","percentageChange","colSpan","rowSpan","icon","isValidElement","cloneElement","IconEl","createSvgIconFromTree","jsxs","clsx","AnimatePresence","m","opacityAnimation","Skeleton","FormattedValue","TrendingIndicator","FormattedBytes","FormattedNumber","props","percentage","calculatePercentage","TrendingUpIcon","TrendingFlatIcon","TrendingDownIcon","ChartLayout","title","description","className","contentIsFlex","contentClassName","contentRef","ChartLoadingIndicator","ProgressCircle","LazyChart","lazy","BaseChart","Suspense","formatReportData","localeCode","shareFirstDatasetLabels","firstDatasetLabels","dataset","datasetIndex","datasetItem","itemIndex","label","generateDatasetLabels","datum","granularity","locale","generateTimeLabels","isoDate","isoEndDate","date","endDate","getFormatter","memoize","options","DateFormatter","a","b","shallowEqual","primaryColor","getBootstrapData","ChartColors","LineChartOptions","LineChart","useSelectedLocale","formattedData","i","PolarAreaChartOptions","PolarAreaChart","d","BarChart","direction","individualBarColors","c","isHorizontal","loaderUrl","useGoogleGeoChart","placeholderRef","country","onCountrySelected","analytics","useSettings","apiKey","selectedTheme","useThemeSelector","geoChartRef","regionInteractivity","drawGoogleChart","useCallback","seedData","location","backgroundColor","themeValueToHex","_a","_b","initGoogleGeoChart","lazyLoader","InfoDialogTriggerIcon","createSvgIcon","InfoDialogTrigger","body","dialogSize","DialogTrigger","IconButton","Dialog","DialogHeader","DialogBody","FormattedCountryName","countryCode","regionNames","formattedName","GeoChart","metricData","layoutProps","initialData","InfoTrigger","Button","ArrowBackIcon","VisitorsReportCharts","totalViews","monthDayFormat","ReportDateSelector","onChange","disabled","compactOnMobile","enableCompare","isMobile","useIsMobileMediaQuery","DateRangeIcon","FormattedDateTimeRange","DateFormatPresets","DateSelectorDialog","state","useDateRangePickerState","compareHasInitialValue","compareState","DateRangeComparePresets","DateRangeDialog","Component","setDateRange","DateRangePresets","StaticPageTitle"],"sources":["../../../common/foundation/resources/client/admin/analytics/use-admin-report.ts","../../../common/foundation/resources/client/ui/library/i18n/formatted-duration.tsx","../../../common/foundation/resources/client/admin/analytics/admin-report-card-row.tsx","../../../common/foundation/resources/client/charts/chart-layout.tsx","../../../common/foundation/resources/client/charts/chart-loading-indicator.tsx","../../../common/foundation/resources/client/charts/base-chart.tsx","../../../common/foundation/resources/client/charts/data/format-report-data.ts","../../../common/foundation/resources/client/charts/chart-colors.tsx","../../../common/foundation/resources/client/charts/line-chart.tsx","../../../common/foundation/resources/client/charts/polar-area-chart.tsx","../../../common/foundation/resources/client/charts/bar-chart.tsx","../../../common/foundation/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/foundation/resources/client/ui/library/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/foundation/resources/client/ui/library/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/foundation/resources/client/ui/library/i18n/formatted-country-name.tsx","../../../common/foundation/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/foundation/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/foundation/resources/client/admin/analytics/report-date-selector.tsx","../../../common/foundation/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {keepPreviousData, useQuery} from '@tanstack/react-query';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {apiClient} from '@common/http/query-client';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {ReactElement} from 'react';\nimport {SvgIconProps} from '@ui/icons/svg-icon';\nimport {IconTree} from '@ui/icons/create-svg-icon';\n\nconst Endpoint = 'admin/reports';\n\nexport interface HeaderCardData {\n  icon: IconTree[] | ReactElement<SvgIconProps>;\n  name: string;\n  type?: 'number' | 'fileSize' | 'percentage';\n  currentValue: number;\n  previousValue?: number;\n  percentageChange?: number;\n}\n\ninterface FetchAnalyticsReportResponse extends BackendResponse {\n  visitorsReport: VisitorsReportData;\n  headerReport: HeaderCardData[];\n}\n\ninterface Payload {\n  types?: ('visitors' | 'header')[];\n  dateRange?: DateRangeValue;\n}\nexport function useAdminReport(payload: Payload = {}) {\n  return useQuery({\n    queryKey: [Endpoint, payload],\n    queryFn: () => fetchAnalyticsReport(payload),\n    placeholderData: keepPreviousData,\n  });\n}\n\nfunction fetchAnalyticsReport({\n  types,\n  dateRange,\n}: Payload): Promise<FetchAnalyticsReportResponse> {\n  const params: Record<string, any> = {};\n  if (types) {\n    params.types = types.join(',');\n  }\n  if (dateRange) {\n    params.startDate = dateRange.start.toAbsoluteString();\n    params.endDate = dateRange.end.toAbsoluteString();\n    params.timezone = dateRange.start.timeZone;\n  }\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\n}\n","import {Fragment, memo, useEffect, useMemo, useRef, useState} from 'react';\nimport {useTrans, UseTransReturn} from '@ui/i18n/use-trans';\nimport {message} from '@ui/i18n/message';\nimport {parseAbsoluteToLocal} from '@internationalized/date';\nimport {getCurrentDateTime} from '@ui/i18n/use-current-date-time';\n\ninterface ParsedMS {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\ninterface FormattedDurationProps {\n  ms?: number;\n  minutes?: number;\n  seconds?: number;\n  startDate?: string;\n  endDate?: string;\n  verbose?: boolean;\n  addZeroToFirstUnit?: boolean;\n  isLive?: boolean;\n  maxIsLiveMs?: number;\n  liveInterval?: number;\n  minDuration?: number;\n}\nexport const FormattedDuration = memo(\n  ({\n    minutes,\n    seconds,\n    ms: propsMs,\n    startDate: propsStartDate,\n    endDate: propsEndDate,\n    verbose = false,\n    addZeroToFirstUnit = true,\n    isLive,\n    maxIsLiveMs,\n    minDuration = 0,\n    liveInterval = 5000,\n  }: FormattedDurationProps) => {\n    const {trans} = useTrans();\n\n    const initialMs = useMemo(() => {\n      if (propsStartDate || propsEndDate) {\n        const startDate = propsStartDate\n          ? parseAbsoluteToLocal(propsStartDate)\n          : getCurrentDateTime();\n        const endDate = propsEndDate\n          ? parseAbsoluteToLocal(propsEndDate)\n          : getCurrentDateTime();\n        const diff = endDate.toDate().getTime() - startDate.toDate().getTime();\n        return diff > minDuration ? diff : minDuration;\n      }\n\n      if (minutes) {\n        return minutes * 60000;\n      } else if (seconds) {\n        return seconds * 1000;\n      }\n\n      if (!propsMs) {\n        return minDuration;\n      }\n\n      return propsMs;\n    }, [minutes, seconds, propsMs, propsStartDate, propsEndDate, minDuration]);\n\n    const [ms, setMs] = useState<number>(initialMs);\n\n    useEffect(() => {\n      setMs(initialMs);\n    }, [initialMs]);\n\n    const msRef = useRef(ms);\n    msRef.current = ms;\n\n    useEffect(() => {\n      const overMaxMs = maxIsLiveMs && msRef.current > maxIsLiveMs;\n      if (isLive && !overMaxMs) {\n        const interval = setInterval(() => {\n          setMs(prev => prev + liveInterval);\n        }, liveInterval);\n        return () => clearInterval(interval);\n      }\n    }, [isLive, liveInterval, maxIsLiveMs, initialMs]);\n\n    const unsignedMs = ms < 0 ? -ms : ms;\n    const parsedMS: ParsedMS = {\n      days: Math.trunc(unsignedMs / 86400000),\n      hours: Math.trunc(unsignedMs / 3600000) % 24,\n      minutes: Math.trunc(unsignedMs / 60000) % 60,\n      seconds: Math.trunc(unsignedMs / 1000) % 60,\n    };\n\n    let formattedValue: string;\n    if (verbose) {\n      formattedValue = formatVerbose(parsedMS, trans);\n    } else {\n      formattedValue = formatCompact(parsedMS, addZeroToFirstUnit);\n    }\n\n    return <Fragment>{formattedValue}</Fragment>;\n  },\n);\n\nfunction formatVerbose(t: ParsedMS, trans: UseTransReturn['trans']) {\n  const output: string[] = [];\n\n  if (t.days) {\n    output.push(`${t.days}${trans(message('d'))}`);\n  }\n  if (t.hours) {\n    output.push(`${t.hours}${trans(message('hr'))}`);\n  }\n  if (t.minutes) {\n    output.push(`${t.minutes}${trans(message('min'))}`);\n  }\n  if (t.seconds && !t.hours) {\n    output.push(`${t.seconds}${trans(message('sec'))}`);\n  }\n\n  return output.join(' ');\n}\n\nfunction formatCompact(t: ParsedMS, addZeroToFirstUnit = true) {\n  const seconds = addZero(t.seconds);\n  let output = '';\n  if (t.days && !output) {\n    output = `${t.days}:${addZero(t.hours)}:${addZero(t.minutes)}:${seconds}`;\n  }\n  if (t.hours && !output) {\n    output = `${addZero(t.hours, addZeroToFirstUnit)}:${addZero(\n      t.minutes,\n    )}:${seconds}`;\n  }\n  if (!output) {\n    output = `${addZero(t.minutes, addZeroToFirstUnit)}:${seconds}`;\n  }\n  return output;\n}\n\nfunction addZero(v: number, addZero = true) {\n  if (!addZero) return v;\n  let value = `${v}`;\n  if (value.length === 1) {\n    value = '0' + value;\n  }\n  return value;\n}\n","import {HeaderCardData} from '@common/admin/analytics/use-admin-report';\nimport React, {\n  cloneElement,\n  Fragment,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport {TrendingUpIcon} from '@ui/icons/material/TrendingUp';\nimport {TrendingDownIcon} from '@ui/icons/material/TrendingDown';\nimport {createSvgIconFromTree, IconTree} from '@ui/icons/create-svg-icon';\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\nimport {FormattedBytes} from '@ui/i18n/formatted-bytes';\nimport {TrendingFlatIcon} from '@ui/icons/material/TrendingFlat';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {opacityAnimation} from '@ui/animation/opacity-animation';\nimport {Skeleton} from '@ui/skeleton/skeleton';\nimport {SvgIconProps} from '@ui/icons/svg-icon';\nimport clsx from 'clsx';\nimport {Trans} from '@ui/i18n/trans';\nimport {FormattedDuration} from '@ui/i18n/formatted-duration';\n\ninterface AdminHeaderReportProps {\n  report?: HeaderCardData[];\n  isLoading?: boolean;\n}\nexport function AdminReportCardRow({\n  report,\n  isLoading,\n}: AdminHeaderReportProps) {\n  if (!report) return <div className=\"col-span-12 row-span-3\" />;\n  return (\n    <Fragment>\n      {report?.map(data => (\n        <ReportCard\n          key={data.name}\n          icon={data.icon}\n          type={data.type}\n          currentValue={data.currentValue}\n          previousValue={data.previousValue}\n          percentageChange={data.percentageChange}\n          isLoading={isLoading}\n        >\n          <Trans message={data.name} />\n        </ReportCard>\n      ))}\n    </Fragment>\n  );\n}\n\ninterface ReportCardProps {\n  icon?: IconTree[] | ReactElement<SvgIconProps>;\n  type?: 'number' | 'fileSize' | 'percentage' | 'durationInSeconds';\n  currentValue: number | null;\n  previousValue?: number | null;\n  percentageChange?: number;\n  isLoading?: boolean;\n  children: ReactNode;\n  colSpan?: string;\n  rowSpan?: string;\n}\nexport function ReportCard({\n  icon: propsIcon,\n  children,\n  type,\n  currentValue,\n  previousValue,\n  percentageChange,\n  isLoading = false,\n  colSpan = 'col-span-3',\n  rowSpan = 'row-span-3',\n}: ReportCardProps) {\n  let icon;\n  if (propsIcon) {\n    if (isValidElement(propsIcon)) {\n      icon = cloneElement(propsIcon, {size: 'sm'});\n    } else {\n      const IconEl = createSvgIconFromTree(propsIcon);\n      icon = <IconEl size=\"sm\" />;\n    }\n  }\n\n  return (\n    <div\n      className={clsx(\n        'compact-scrollbar flex flex-col justify-between overflow-x-auto overflow-y-hidden whitespace-nowrap rounded-panel border px-20 py-14',\n        colSpan,\n        rowSpan,\n      )}\n    >\n      <div className=\"flex items-center gap-6\">\n        {icon}\n        <h2 className=\"text-sm font-semibold\">{children}</h2>\n      </div>\n      <div className=\"flex gap-10\">\n        <div className=\"text-4xl font-medium text-main\">\n          <AnimatePresence initial={false} mode=\"wait\">\n            {isLoading ? (\n              <m.div key=\"skeleton\" {...opacityAnimation}>\n                <Skeleton className=\"min-w-40\" />\n              </m.div>\n            ) : (\n              <m.div key=\"value\" {...opacityAnimation}>\n                <FormattedValue type={type} value={currentValue} />\n              </m.div>\n            )}\n          </AnimatePresence>\n        </div>\n        {currentValue != null &&\n          (percentageChange != null || previousValue != null) && (\n            <div className=\"flex items-center gap-10\">\n              <TrendingIndicator\n                currentValue={currentValue}\n                previousValue={previousValue}\n                percentageChange={percentageChange}\n              />\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\ninterface FormattedValueProps {\n  type: ReportCardProps['type'];\n  value: ReportCardProps['currentValue'];\n}\nfunction FormattedValue({type, value}: FormattedValueProps) {\n  if (value == null) return '—';\n  switch (type) {\n    case 'fileSize':\n      return <FormattedBytes bytes={value} />;\n    case 'percentage':\n      return (\n        <FormattedNumber\n          value={value}\n          style=\"percent\"\n          maximumFractionDigits={1}\n        />\n      );\n    case 'durationInSeconds':\n      return <FormattedDuration seconds={value as number} verbose />;\n    default:\n      return <FormattedNumber value={value} />;\n  }\n}\n\ninterface TrendingIndicatorProps {\n  currentValue: number;\n  previousValue?: number | null;\n  percentageChange?: number;\n}\nfunction TrendingIndicator(props: TrendingIndicatorProps) {\n  const percentage = calculatePercentage(props);\n  let icon: ReactElement;\n  if (percentage > 0) {\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\n  } else if (percentage === 0) {\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\n  } else {\n    icon = <TrendingDownIcon className=\"text-danger\" />;\n  }\n\n  return (\n    <Fragment>\n      {icon}\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\n    </Fragment>\n  );\n}\n\nfunction calculatePercentage({\n  percentageChange,\n  previousValue,\n  currentValue,\n}: TrendingIndicatorProps) {\n  if (\n    percentageChange != null ||\n    previousValue == null ||\n    currentValue == null\n  ) {\n    return percentageChange ?? 0;\n  }\n\n  if (previousValue === 0) {\n    return 100;\n  }\n\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\n}\n","import {ReactNode, Ref} from 'react';\nimport clsx from 'clsx';\n\nexport interface ChartLayoutProps {\n  title: ReactNode;\n  description?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  contentIsFlex?: boolean;\n  contentClassName?: string;\n  contentRef?: Ref<HTMLDivElement>;\n  isLoading?: boolean;\n}\nexport function ChartLayout(props: ChartLayoutProps) {\n  const {\n    title,\n    description,\n    children,\n    className,\n    contentIsFlex = true,\n    contentClassName,\n    contentRef,\n  } = props;\n\n  return (\n    <div\n      className={clsx(\n        'flex h-full flex-auto flex-col rounded-panel border bg p-20 dark:bg-alt',\n        className,\n      )}\n    >\n      <div className=\"flex flex-shrink-0 items-center justify-between pb-10 text-xs\">\n        <div className=\"text-sm font-semibold\">{title}</div>\n        {description && <div className=\"text-muted\">{description}</div>}\n      </div>\n      <div\n        ref={contentRef}\n        className={clsx(\n          'relative',\n          contentIsFlex && 'flex flex-auto items-center justify-center',\n          contentClassName,\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n","import {ProgressCircle} from '@ui/progress/progress-circle';\nimport {Trans} from '@ui/i18n/trans';\n\nexport function ChartLoadingIndicator() {\n  return (\n    <div className=\"absolute mx-auto flex items-center gap-10 text-sm\">\n      <ProgressCircle isIndeterminate size=\"sm\" />\n      <Trans message=\"Chart loading\" />\n    </div>\n  );\n}\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\nimport {lazy, Suspense} from 'react';\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\nimport clsx from 'clsx';\n\nconst LazyChart = lazy(() => import('./lazy-chart'));\n\nexport interface BaseChartProps<Type extends ChartType = ChartType>\n  extends Omit<ChartLayoutProps, 'children'> {\n  type: Type;\n  data: ChartData<Type, unknown>;\n  options?: ChartOptions<Type>;\n  hideLegend?: boolean;\n  rowSpan?: string;\n  colSpan?: string;\n}\nexport function BaseChart<Type extends ChartType = ChartType>(\n  props: BaseChartProps<Type>,\n) {\n  const {\n    title,\n    description,\n    className,\n    rowSpan = 'row-span-11',\n    colSpan = 'col-span-6',\n    contentRef,\n    isLoading,\n  } = props;\n\n  return (\n    <ChartLayout\n      title={title}\n      description={description}\n      className={clsx(className, rowSpan, colSpan)}\n      contentRef={contentRef}\n    >\n      <Suspense fallback={<ChartLoadingIndicator />}>\n        <LazyChart {...props} />\n        {isLoading && <ChartLoadingIndicator />}\n      </Suspense>\n    </ChartLayout>\n  );\n}\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\nimport memoize from 'nano-memoize';\nimport {ChartType} from 'chart.js';\nimport {\n  FormattedDatasetItem,\n  FormattedReportData,\n} from './formatted-dataset-item';\nimport {\n  DatasetItem,\n  RangedDatasetGranularity,\n  ReportMetric,\n} from '../../admin/analytics/report-metric';\nimport {shallowEqual} from '@ui/utils/shallow-equal';\n\ninterface Options {\n  localeCode: string;\n  shareFirstDatasetLabels?: boolean;\n}\n\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\n\nexport function formatReportData(\n  report: ReportMetric<DatasetItem> | undefined,\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options,\n): FormattedReportData {\n  if (!report) return {datasets: []};\n\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\n\n  return {\n    ...report,\n    datasets: report.datasets.map((dataset, datasetIndex) => {\n      const data = dataset.data.map((datasetItem, itemIndex) => {\n        let label: FormattedDatasetLabels;\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\n          label = generateDatasetLabels(\n            datasetItem,\n            report.granularity,\n            localeCode,\n          );\n          firstDatasetLabels[itemIndex] = label;\n        } else {\n          label = firstDatasetLabels[itemIndex];\n        }\n        return {\n          ...label,\n          value: datasetItem.value,\n        };\n      });\n\n      return {...dataset, data};\n    }),\n  };\n}\n\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\n  datum: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined,\n  locale: string,\n): FormattedDatasetLabels {\n  if (datum.label) {\n    return {label: datum.label};\n  }\n\n  if (!datum.date) {\n    return {label: ''};\n  }\n\n  return generateTimeLabels(datum, granularity, locale);\n}\n\nfunction generateTimeLabels(\n  {date: isoDate, endDate: isoEndDate}: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined = 'day',\n  locale: string,\n): Omit<FormattedDatasetItem, 'value'> {\n  const date = parseAbsoluteToLocal(isoDate!).toDate();\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\n\n  switch (granularity) {\n    case 'minute':\n      return {\n        label: getFormatter(locale, {\n          second: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n          second: '2-digit',\n        }).format(date),\n      };\n    case 'hour':\n      return {\n        label: getFormatter(locale, {\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n      };\n    case 'day':\n      return {\n        label: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n          month: 'short',\n        }).format(date),\n      };\n    case 'week':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          month: 'long',\n          year: 'numeric',\n        }).formatRange(date, endDate as Date),\n      };\n    case 'month':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'long',\n          year: 'numeric',\n        }).format(date),\n      };\n    case 'year':\n      return {\n        label: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n      };\n  }\n}\n\nconst getFormatter = memoize(\n  (locale, options: Intl.DateTimeFormatOptions) => {\n    return new DateFormatter(locale, options);\n  },\n  {\n    equals: (a, b) => {\n      return shallowEqual(a, b);\n    },\n    callTimeout: undefined as any,\n  },\n);\n","import {getBootstrapData} from '@ui/bootstrap-data/bootstrap-data-store';\n\nconst primaryColor = getBootstrapData().themes[0].values['--be-primary'];\nexport const ChartColors = [\n  [\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\n  ],\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\n];\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\n\nconst LineChartOptions: ChartOptions<'line'> = {\n  parsing: {\n    xAxisKey: 'label',\n    yAxisKey: 'value',\n  },\n  datasets: {\n    line: {\n      fill: 'origin',\n      tension: 0.1,\n      pointBorderWidth: 4,\n      pointHitRadius: 10,\n    },\n  },\n  plugins: {\n    tooltip: {\n      intersect: false,\n      mode: 'index',\n    },\n  },\n};\n\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\n  data?: ReportMetric<DatasetItem>;\n}\nexport function LineChart({data, ...props}: LineChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors[i][1],\n        borderColor: ChartColors[i][0],\n        pointBackgroundColor: ChartColors[i][0],\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      {...props}\n      data={formattedData}\n      type=\"line\"\n      options={LineChartOptions}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\n\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\n  parsing: {\n    key: 'value',\n  },\n  plugins: {\n    tooltip: {\n      intersect: true,\n    },\n  },\n};\n\ninterface PolarAreaChartProps\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\n  data?: ReportMetric<DatasetItem>;\n}\nexport function PolarAreaChart({\n  data,\n  className,\n  ...props\n}: PolarAreaChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors.map(c => c[1]),\n        borderColor: ChartColors.map(c => c[0]),\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      type=\"polarArea\"\n      data={formattedData}\n      options={PolarAreaChartOptions}\n      className={className}\n      {...props}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\n\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\n  direction?: 'horizontal' | 'vertical';\n  individualBarColors?: boolean;\n  data?: ReportMetric<DatasetItem>;\n}\nexport function BarChart({\n  data,\n  direction = 'vertical',\n  individualBarColors = false,\n  className,\n  ...props\n}: BarChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: individualBarColors\n          ? ChartColors.map(c => c[1])\n          : ChartColors[i][1],\n        borderColor: individualBarColors\n          ? ChartColors.map(c => c[0])\n          : ChartColors[i][0],\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode, individualBarColors]);\n\n  const isHorizontal = direction === 'horizontal';\n  const options: ChartOptions<'bar'> = useMemo(() => {\n    return {\n      indexAxis: isHorizontal ? 'y' : 'x',\n      parsing: {\n        xAxisKey: isHorizontal ? 'value' : 'label',\n        yAxisKey: isHorizontal ? 'label' : 'value',\n      },\n    };\n  }, [isHorizontal]);\n\n  return (\n    <BaseChart\n      type=\"bar\"\n      className={className}\n      data={formattedData}\n      options={options}\n      {...props}\n    />\n  );\n}\n","import lazyLoader from '@ui/utils/loaders/lazy-loader';\nimport {useSettings} from '@ui/settings/use-settings';\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\nimport {useThemeSelector} from '@ui/themes/theme-selector-context';\nimport {themeValueToHex} from '@ui/themes/utils/theme-value-to-hex';\nimport {useTrans} from '@ui/i18n/use-trans';\nimport {message} from '@ui/i18n/message';\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\n\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\n\ninterface UseGoogleGeoChartProps {\n  placeholderRef: RefObject<HTMLDivElement>;\n  data: LocationDatasetItem[];\n  onCountrySelected?: (countryCode: string) => void;\n  country?: string;\n}\nexport function useGoogleGeoChart({\n  placeholderRef,\n  data,\n  country,\n  onCountrySelected,\n}: UseGoogleGeoChartProps) {\n  const {trans} = useTrans();\n  const {analytics} = useSettings();\n  const apiKey = analytics?.gchart_api_key;\n  const {selectedTheme} = useThemeSelector();\n  const geoChartRef = useRef<google.visualization.GeoChart>();\n  // only allow selecting countries, not cities\n  const regionInteractivity = !!onCountrySelected && !country;\n  const drawGoogleChart = useCallback(() => {\n    if (typeof google === 'undefined') return;\n\n    const seedData = data.map(location => [location.label, location.value]);\n    seedData.unshift([\n      country ? trans(message('City')) : trans(message('Country')),\n      trans(message('Clicks')),\n    ]);\n\n    const backgroundColor = `${themeValueToHex(\n      selectedTheme.values['--be-paper'],\n    )}`;\n    const chartColor = `${themeValueToHex(\n      selectedTheme.values['--be-primary'],\n    )}`;\n\n    const options: google.visualization.GeoChartOptions = {\n      colorAxis: {colors: [chartColor]},\n      backgroundColor,\n      region: country ? country.toUpperCase() : undefined,\n      resolution: country ? 'provinces' : 'countries',\n      displayMode: country ? 'markers' : 'regions',\n      enableRegionInteractivity: regionInteractivity,\n    };\n\n    if (\n      !geoChartRef.current &&\n      placeholderRef.current &&\n      google?.visualization?.GeoChart\n    ) {\n      geoChartRef.current = new google.visualization.GeoChart(\n        placeholderRef.current,\n      );\n    }\n    geoChartRef.current?.draw(\n      google.visualization.arrayToDataTable(seedData),\n      options,\n    );\n  }, [\n    selectedTheme,\n    data,\n    placeholderRef,\n    trans,\n    country,\n    regionInteractivity,\n  ]);\n\n  const initGoogleGeoChart = useCallback(async () => {\n    if (lazyLoader.isLoadingOrLoaded(loaderUrl)) return;\n    await lazyLoader.loadAsset(loaderUrl, {type: 'js', id: 'google-charts-js'});\n    await google.charts.load('current', {\n      packages: ['geochart'],\n      mapsApiKey: apiKey,\n    });\n    drawGoogleChart();\n  }, [apiKey, drawGoogleChart]);\n\n  useEffect(() => {\n    if (geoChartRef.current && onCountrySelected) {\n      google.visualization.events.addListener(\n        geoChartRef.current,\n        'regionClick',\n        (a: {region: string}) => onCountrySelected?.(a.region),\n      );\n    }\n\n    return () => {\n      if (geoChartRef.current) {\n        google.visualization.events.removeAllListeners(geoChartRef.current);\n      }\n    };\n    // this will correctly run when geochart instance is set on ref\n  }, [onCountrySelected, geoChartRef.current]);\n\n  // on component load: load chart library then draw, otherwise just draw\n  useEffect(() => {\n    initGoogleGeoChart();\n  }, [initGoogleGeoChart]);\n\n  // redraw chart if data or theme changes\n  useEffect(() => {\n    drawGoogleChart();\n  }, [selectedTheme, drawGoogleChart, data]);\n\n  return {drawGoogleChart};\n}\n","import {createSvgIcon} from '@ui/icons/create-svg-icon';\n\nexport const InfoDialogTriggerIcon = createSvgIcon(\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\n  'InfoDialogTrigger',\n);\n","import {IconButton} from '@ui/buttons/icon-button';\nimport {InfoDialogTriggerIcon} from '@ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\nimport {Dialog, DialogSize} from '@ui/overlays/dialog/dialog';\nimport {DialogHeader} from '@ui/overlays/dialog/dialog-header';\nimport {DialogBody} from '@ui/overlays/dialog/dialog-body';\nimport {DialogTrigger} from '@ui/overlays/dialog/dialog-trigger';\nimport React, {ReactNode} from 'react';\nimport clsx from 'clsx';\n\ninterface Props {\n  title?: ReactNode;\n  body: ReactNode;\n  dialogSize?: DialogSize;\n  className?: string;\n}\nexport function InfoDialogTrigger({\n  title,\n  body,\n  dialogSize = 'sm',\n  className,\n}: Props) {\n  return (\n    <DialogTrigger type=\"popover\" triggerOnHover>\n      <IconButton\n        className={clsx('ml-4 text-muted opacity-70', className)}\n        iconSize=\"xs\"\n        size=\"2xs\"\n      >\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\n      </IconButton>\n      <Dialog size={dialogSize}>\n        {title && (\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\n            {title}\n          </DialogHeader>\n        )}\n        <DialogBody>{body}</DialogBody>\n      </Dialog>\n    </DialogTrigger>\n  );\n}\n","import {useSelectedLocale} from '@ui/i18n/selected-locale';\nimport {Fragment, memo} from 'react';\n\ninterface Props {\n  code: string;\n}\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\n  const {localeCode} = useSelectedLocale();\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\n  let formattedName: string | undefined;\n\n  try {\n    formattedName = regionNames.of(countryCode.toUpperCase());\n  } catch (e) {}\n\n  return <Fragment>{formattedName}</Fragment>;\n});\n","import {\n  LocationDatasetItem,\n  ReportMetric,\n} from '@common/admin/analytics/report-metric';\nimport React, {useMemo, useRef} from 'react';\nimport {useGoogleGeoChart} from './use-google-geo-chart';\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\nimport {Button} from '@ui/buttons/button';\nimport {ArrowBackIcon} from '@ui/icons/material/ArrowBack';\nimport clsx from 'clsx';\nimport {InfoDialogTrigger} from '@ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\nimport {Trans} from '@ui/i18n/trans';\nimport {FormattedCountryName} from '@ui/i18n/formatted-country-name';\n\ninterface GeoChartData extends Partial<ChartLayoutProps> {\n  data?: ReportMetric<LocationDatasetItem>;\n  onCountrySelected?: (countryCode: string | undefined) => void;\n  country?: string;\n  colSpan?: string;\n  rowSpan?: string;\n}\nexport function GeoChart({\n  data: metricData,\n  isLoading,\n  onCountrySelected,\n  country,\n  className,\n  colSpan = 'col-span-7',\n  rowSpan = 'row-span-11',\n  ...layoutProps\n}: GeoChartData) {\n  const placeholderRef = useRef<HTMLDivElement>(null);\n  const regionInteractivity = !!onCountrySelected;\n\n  // memo data to avoid redrawing chart on rerender\n  const initialData = metricData?.datasets[0].data;\n  const data = useMemo(() => {\n    return initialData || [];\n  }, [initialData]);\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\n\n  return (\n    <ChartLayout\n      {...layoutProps}\n      className={clsx(\n        className,\n        colSpan,\n        rowSpan,\n        'compact-scrollbar overflow-x-auto overflow-y-hidden',\n      )}\n      title={\n        <div className=\"flex items-center\">\n          <Trans message=\"Top Locations\" />\n          {country ? (\n            <span className=\"pl-4\">\n              ({<FormattedCountryName code={country} />})\n            </span>\n          ) : null}\n          {regionInteractivity && <InfoTrigger />}\n        </div>\n      }\n      contentIsFlex={isLoading}\n    >\n      {isLoading && <ChartLoadingIndicator />}\n      <div className=\"flex gap-24\">\n        <div\n          ref={placeholderRef}\n          className=\"min-h-[340px] w-[480px] flex-auto\"\n        />\n        <div className=\"w-[170px]\">\n          <div className=\"max-h-[340px] w-full flex-initial overflow-y-auto text-sm\">\n            {data.map(location => (\n              <div\n                key={location.label}\n                className={clsx(\n                  'mb-4 flex items-center gap-4',\n                  regionInteractivity && 'cursor-pointer hover:underline',\n                )}\n                role={regionInteractivity ? 'button' : undefined}\n                onClick={() => {\n                  onCountrySelected?.(location.code);\n                }}\n              >\n                <div className=\"max-w-110 overflow-hidden overflow-ellipsis whitespace-nowrap\">\n                  {location.label}\n                </div>\n                <div>({location.percentage})%</div>\n              </div>\n            ))}\n          </div>\n          {country && (\n            <Button\n              variant=\"outline\"\n              size=\"xs\"\n              className=\"mt-14\"\n              startIcon={<ArrowBackIcon />}\n              onClick={() => {\n                onCountrySelected?.(undefined);\n              }}\n            >\n              <Trans message=\"Back to countries\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </ChartLayout>\n  );\n}\n\nfunction InfoTrigger() {\n  return (\n    <InfoDialogTrigger\n      title={<Trans message=\"Zooming in\" />}\n      body={\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\n      }\n    />\n  );\n}\n","import React, {Fragment} from 'react';\nimport {LineChart} from '@common/charts/line-chart';\nimport {Trans} from '@ui/i18n/trans';\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\nimport {BarChart} from '@common/charts/bar-chart';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\n\ninterface AdminReportChartsProps {\n  report?: VisitorsReportData;\n  isLoading: boolean;\n}\nexport function VisitorsReportCharts({\n  report,\n  isLoading,\n}: AdminReportChartsProps) {\n  const totalViews = report?.pageViews.total;\n  return (\n    <Fragment>\n      <LineChart\n        colSpan=\"col-span-8\"\n        isLoading={isLoading}\n        data={report?.pageViews}\n        title={<Trans message=\"Pageviews\" />}\n        description={\n          totalViews ? (\n            <Trans\n              message=\":count total views\"\n              values={{count: <FormattedNumber value={totalViews} />}}\n            />\n          ) : null\n        }\n      />\n      <PolarAreaChart\n        colSpan=\"col-span-4\"\n        isLoading={isLoading}\n        data={report?.devices}\n        title={<Trans message=\"Top devices\" />}\n      />\n      <GeoChart\n        colSpan=\"col-span-7\"\n        isLoading={isLoading}\n        data={report?.locations}\n        title={<Trans message=\"Top locations\" />}\n      />\n      <BarChart\n        colSpan=\"col-span-5\"\n        isLoading={isLoading}\n        data={report?.browsers}\n        direction=\"horizontal\"\n        individualBarColors\n        hideLegend\n        title={<Trans message=\"Top browsers\" />}\n      />\n    </Fragment>\n  );\n}\n","import {useDateRangePickerState} from '@ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\nimport {DialogTrigger} from '@ui/overlays/dialog/dialog-trigger';\nimport {Button} from '@ui/buttons/button';\nimport {DateRangeIcon} from '@ui/icons/material/DateRange';\nimport {FormattedDateTimeRange} from '@ui/i18n/formatted-date-time-range';\nimport {DateRangeDialog} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\nimport React from 'react';\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {useIsMobileMediaQuery} from '@ui/utils/hooks/is-mobile-media-query';\nimport {DateFormatPresets} from '@ui/i18n/formatted-date';\nimport {DateRangeComparePresets} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-compare-presets';\nimport {Granularity} from '@ui/forms/input-field/date/date-picker/use-date-picker-state';\n\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: '2-digit',\n};\n\ninterface ReportDataSelectorProps {\n  value: DateRangeValue;\n  disabled?: boolean;\n  onChange: (value: DateRangeValue) => void;\n  compactOnMobile?: boolean;\n  enableCompare?: boolean;\n  granularity?: Granularity;\n}\nexport function ReportDateSelector({\n  value,\n  onChange,\n  disabled,\n  compactOnMobile = true,\n  enableCompare = false,\n  granularity = 'minute',\n}: ReportDataSelectorProps) {\n  const isMobile = useIsMobileMediaQuery();\n  return (\n    <DialogTrigger\n      type=\"popover\"\n      onClose={value => {\n        if (value) {\n          onChange(value);\n        }\n      }}\n    >\n      <Button\n        variant=\"outline\"\n        color=\"chip\"\n        endIcon={<DateRangeIcon />}\n        disabled={disabled}\n      >\n        <FormattedDateTimeRange\n          start={value.start}\n          end={value.end}\n          options={\n            isMobile && compactOnMobile\n              ? monthDayFormat\n              : DateFormatPresets.short\n          }\n        />\n      </Button>\n      <DateSelectorDialog\n        value={value}\n        enableCompare={enableCompare}\n        granularity={granularity}\n      />\n    </DialogTrigger>\n  );\n}\n\ninterface DateSelectorDialogProps {\n  value: DateRangeValue;\n  enableCompare: boolean;\n  granularity: Granularity;\n}\nfunction DateSelectorDialog({\n  value,\n  enableCompare,\n  granularity,\n}: DateSelectorDialogProps) {\n  const isMobile = useIsMobileMediaQuery();\n  const state = useDateRangePickerState({\n    granularity,\n    defaultValue: {\n      start: value.start,\n      end: value.end,\n      preset: value.preset,\n    },\n    closeDialogOnSelection: false,\n  });\n  const compareHasInitialValue = !!value.compareStart && !!value.compareEnd;\n  const compareState = useDateRangePickerState({\n    granularity,\n    defaultValue: compareHasInitialValue\n      ? {\n          start: value.compareStart,\n          end: value.compareEnd,\n          preset: value.comparePreset,\n        }\n      : DateRangeComparePresets[0].getRangeValue(state.selectedValue),\n  });\n  return (\n    <DateRangeDialog\n      state={state}\n      compareState={enableCompare ? compareState : undefined}\n      compareVisibleDefault={compareHasInitialValue}\n      showInlineDatePickerField={!isMobile}\n    />\n  );\n}\n","import React, {useState} from 'react';\nimport {useAdminReport} from './use-admin-report';\nimport {Trans} from '@ui/i18n/trans';\nimport {StaticPageTitle} from '../../seo/static-page-title';\nimport {AdminReportCardRow} from '@common/admin/analytics/admin-report-card-row';\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {DateRangePresets} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\n\nexport function Component() {\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\n    // This week\n    return DateRangePresets[2].getRangeValue();\n  });\n  const {isLoading, data} = useAdminReport({dateRange});\n  const title = <Trans message=\"Visitors report\" />;\n\n  return (\n    <div className=\"min-h-full gap-12 overflow-x-hidden p-12 md:gap-18 md:p-18\">\n      <div className=\"mb-24 items-center justify-between gap-24 md:flex\">\n        <StaticPageTitle>{title}</StaticPageTitle>\n        <h1 className=\"mb-24 text-3xl font-light md:mb-0\">{title}</h1>\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\n      </div>\n      <div className=\"chart-grid\">\n        <AdminReportCardRow report={data?.headerReport} />\n        <VisitorsReportCharts\n          report={data?.visitorsReport}\n          isLoading={isLoading}\n        />\n      </div>\n    </div>\n  );\n}\n"],"file":"assets/admin-report-page-c1015bcd.js"}